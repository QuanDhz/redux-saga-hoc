'use strict';

var _immutable = require('immutable');

var _constants = require('../constants');

var _selectors = require('../selectors');

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var PAGE = 'mockTestPage';

describe('selectPage', function () {
  var registerSelector = (0, _selectors.selectPage)(PAGE);
  it('should select the register state', function () {
    var registerState = (0, _immutable.fromJS)({
      userData: {}
    });
    var mockedState = (0, _immutable.fromJS)(_defineProperty({}, PAGE, registerState));
    expect(registerSelector(mockedState)).toEqual(registerState);
  });
});

describe('selectServerValidationeError', function () {
  var selector = (0, _selectors.selectErrors)(PAGE);
  it('should select the selectServerValidation state', function () {
    var expectedResult = 'error';
    var mockedState = (0, _immutable.fromJS)(_defineProperty({}, PAGE, _defineProperty({}, _constants.SERVER_ERROR, expectedResult)));
    expect(selector(mockedState)).toEqual(expectedResult);
  });
});

describe('selectIsSubmitSuccess', function () {
  var selector = (0, _selectors.selectIsSubmitSuccess)(PAGE);
  it('should select the selectIsSubmitSuccess state', function () {
    var expectedResult = false;
    var mockedState = (0, _immutable.fromJS)(_defineProperty({}, PAGE, _defineProperty({}, _constants.SUBMIT_SUCCESS, expectedResult)));
    expect(selector(mockedState)).toEqual(expectedResult);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9fX3Rlc3RzX18vc2VsZWN0b3JzLnRlc3QuanMiXSwibmFtZXMiOlsiUEFHRSIsImRlc2NyaWJlIiwicmVnaXN0ZXJTZWxlY3RvciIsIml0IiwicmVnaXN0ZXJTdGF0ZSIsInVzZXJEYXRhIiwibW9ja2VkU3RhdGUiLCJleHBlY3QiLCJ0b0VxdWFsIiwic2VsZWN0b3IiLCJleHBlY3RlZFJlc3VsdCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7QUFJQTs7OztBQU1BLElBQU1BLE9BQU8sY0FBYjs7QUFFQUMsU0FBUyxZQUFULEVBQXVCLFlBQU07QUFDM0IsTUFBTUMsbUJBQW1CLDJCQUFXRixJQUFYLENBQXpCO0FBQ0FHLEtBQUcsa0NBQUgsRUFBdUMsWUFBTTtBQUMzQyxRQUFNQyxnQkFBZ0IsdUJBQU87QUFDM0JDLGdCQUFVO0FBRGlCLEtBQVAsQ0FBdEI7QUFHQSxRQUFNQyxjQUFjLDJDQUNqQk4sSUFEaUIsRUFDVkksYUFEVSxFQUFwQjtBQUdBRyxXQUFPTCxpQkFBaUJJLFdBQWpCLENBQVAsRUFBc0NFLE9BQXRDLENBQThDSixhQUE5QztBQUNELEdBUkQ7QUFTRCxDQVhEOztBQWFBSCxTQUFTLDhCQUFULEVBQXlDLFlBQU07QUFDN0MsTUFBTVEsV0FBVyw2QkFBYVQsSUFBYixDQUFqQjtBQUNBRyxLQUFHLGdEQUFILEVBQXFELFlBQU07QUFDekQsUUFBTU8saUJBQWlCLE9BQXZCO0FBQ0EsUUFBTUosY0FBYywyQ0FDakJOLElBRGlCLCtDQUVBVSxjQUZBLEdBQXBCO0FBS0FILFdBQU9FLFNBQVNILFdBQVQsQ0FBUCxFQUE4QkUsT0FBOUIsQ0FBc0NFLGNBQXRDO0FBQ0QsR0FSRDtBQVNELENBWEQ7O0FBYUFULFNBQVMsdUJBQVQsRUFBa0MsWUFBTTtBQUN0QyxNQUFNUSxXQUFXLHNDQUFzQlQsSUFBdEIsQ0FBakI7QUFDQUcsS0FBRywrQ0FBSCxFQUFvRCxZQUFNO0FBQ3hELFFBQU1PLGlCQUFpQixLQUF2QjtBQUNBLFFBQU1KLGNBQWMsMkNBQ2pCTixJQURpQixpREFFRVUsY0FGRixHQUFwQjtBQUtBSCxXQUFPRSxTQUFTSCxXQUFULENBQVAsRUFBOEJFLE9BQTlCLENBQXNDRSxjQUF0QztBQUNELEdBUkQ7QUFTRCxDQVhEIiwiZmlsZSI6InNlbGVjdG9ycy50ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZnJvbUpTIH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7XG4gIFNFUlZFUl9FUlJPUixcbiAgU1VCTUlUX1NVQ0NFU1MsXG59IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQge1xuICBzZWxlY3RQYWdlLFxuICBzZWxlY3RFcnJvcnMsXG4gIHNlbGVjdElzU3VibWl0U3VjY2Vzcyxcbn0gZnJvbSAnLi4vc2VsZWN0b3JzJztcblxuY29uc3QgUEFHRSA9ICdtb2NrVGVzdFBhZ2UnO1xuXG5kZXNjcmliZSgnc2VsZWN0UGFnZScsICgpID0+IHtcbiAgY29uc3QgcmVnaXN0ZXJTZWxlY3RvciA9IHNlbGVjdFBhZ2UoUEFHRSk7XG4gIGl0KCdzaG91bGQgc2VsZWN0IHRoZSByZWdpc3RlciBzdGF0ZScsICgpID0+IHtcbiAgICBjb25zdCByZWdpc3RlclN0YXRlID0gZnJvbUpTKHtcbiAgICAgIHVzZXJEYXRhOiB7fSxcbiAgICB9KTtcbiAgICBjb25zdCBtb2NrZWRTdGF0ZSA9IGZyb21KUyh7XG4gICAgICBbUEFHRV06IHJlZ2lzdGVyU3RhdGUsXG4gICAgfSk7XG4gICAgZXhwZWN0KHJlZ2lzdGVyU2VsZWN0b3IobW9ja2VkU3RhdGUpKS50b0VxdWFsKHJlZ2lzdGVyU3RhdGUpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnc2VsZWN0U2VydmVyVmFsaWRhdGlvbmVFcnJvcicsICgpID0+IHtcbiAgY29uc3Qgc2VsZWN0b3IgPSBzZWxlY3RFcnJvcnMoUEFHRSk7XG4gIGl0KCdzaG91bGQgc2VsZWN0IHRoZSBzZWxlY3RTZXJ2ZXJWYWxpZGF0aW9uIHN0YXRlJywgKCkgPT4ge1xuICAgIGNvbnN0IGV4cGVjdGVkUmVzdWx0ID0gJ2Vycm9yJztcbiAgICBjb25zdCBtb2NrZWRTdGF0ZSA9IGZyb21KUyh7XG4gICAgICBbUEFHRV06IHtcbiAgICAgICAgW1NFUlZFUl9FUlJPUl06IGV4cGVjdGVkUmVzdWx0LFxuICAgICAgfSxcbiAgICB9KTtcbiAgICBleHBlY3Qoc2VsZWN0b3IobW9ja2VkU3RhdGUpKS50b0VxdWFsKGV4cGVjdGVkUmVzdWx0KTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ3NlbGVjdElzU3VibWl0U3VjY2VzcycsICgpID0+IHtcbiAgY29uc3Qgc2VsZWN0b3IgPSBzZWxlY3RJc1N1Ym1pdFN1Y2Nlc3MoUEFHRSk7XG4gIGl0KCdzaG91bGQgc2VsZWN0IHRoZSBzZWxlY3RJc1N1Ym1pdFN1Y2Nlc3Mgc3RhdGUnLCAoKSA9PiB7XG4gICAgY29uc3QgZXhwZWN0ZWRSZXN1bHQgPSBmYWxzZTtcbiAgICBjb25zdCBtb2NrZWRTdGF0ZSA9IGZyb21KUyh7XG4gICAgICBbUEFHRV06IHtcbiAgICAgICAgW1NVQk1JVF9TVUNDRVNTXTogZXhwZWN0ZWRSZXN1bHQsXG4gICAgICB9LFxuICAgIH0pO1xuICAgIGV4cGVjdChzZWxlY3Rvcihtb2NrZWRTdGF0ZSkpLnRvRXF1YWwoZXhwZWN0ZWRSZXN1bHQpO1xuICB9KTtcbn0pO1xuIl19