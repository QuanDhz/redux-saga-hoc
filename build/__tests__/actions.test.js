'use strict';

var _eventGeneratorTester = require('eslint/lib/testers/event-generator-tester');

var _actions = require('../actions');

var _constants = require('../constants');

var page = 'mockTestPage';

(0, _eventGeneratorTester.describe)('Register Actions', function () {
  (0, _eventGeneratorTester.describe)('register server validation', function () {
    (0, _eventGeneratorTester.it)('submitFormSucceed should return the correct type and success response', function () {
      var fixture = 'data';
      var expectedResult = {
        type: _constants.SUBMIT_SUCCEED,
        page: page,
        payload: fixture,
        result: fixture
      };
      var actualResult = (0, _actions.submitFormSucceed)(fixture, fixture, page);
      expect(actualResult.type.indexOf(expectedResult.type)).not.toEqual(-1);
      expect(actualResult.page).toEqual(expectedResult.page);
      expect(actualResult.payload).toEqual(fixture);
      expect(actualResult.result).toEqual(expectedResult.result);
    });
    (0, _eventGeneratorTester.it)('submitFormFailed should return the correct type and error', function () {
      var fixture = 'some error';
      var expectedResult = {
        type: _constants.SUBMIT_FAILED,
        page: page,
        error: fixture
      };
      var actualResult = (0, _actions.submitFormFailed)(fixture, fixture, page);
      expect(actualResult.type.indexOf(expectedResult.type)).not.toEqual(-1);
      expect(actualResult.page).toEqual(expectedResult.page);
      expect(actualResult.payload).toEqual(fixture);
      expect(actualResult.result).toEqual(expectedResult.result);
    });
    (0, _eventGeneratorTester.it)('submitForm should return the correct type', function () {
      var fixture = 'data';
      var expectedResult = {
        type: _constants.DO_SUBMIT,
        options: { page: page },
        data: fixture
      };
      var actualResult = (0, _actions.submitForm)(fixture, page);
      expect(actualResult.type.indexOf(expectedResult.type)).not.toEqual(-1);
      expect(actualResult.page).toEqual(expectedResult.page);
      expect(actualResult.result).toEqual(expectedResult.result);
    });
    (0, _eventGeneratorTester.it)('cleanup should return the correct type', function () {
      var expectedResult = {
        type: _constants.HOC_CLEAR,
        page: page
      };
      var actualResult = (0, _actions.cleanup)(page);
      expect(actualResult.type.indexOf(expectedResult.type)).not.toEqual(-1);
      expect(actualResult.page).toEqual(expectedResult.page);
    });
    (0, _eventGeneratorTester.it)('acknowledge should return the correct type', function () {
      var fixture = 'data';
      var expectedResult = {
        type: _constants.SUBMIT_ACKED,
        page: page
      };
      var actualResult = (0, _actions.acknowledge)(page, fixture);
      expect(actualResult.type.indexOf(expectedResult.type)).not.toEqual(-1);
      expect(actualResult.page).toEqual(expectedResult.page);
      expect(actualResult.formName).toEqual(fixture);
    });
    (0, _eventGeneratorTester.it)('setVariable should return the correct type', function () {
      var key = 'keyyy';
      var value = 'valueee';
      var expectedResult = {
        type: _constants.REDUX_SET, page: page, key: key, value: value
      };
      var actualResult = (0, _actions.setVariable)(page, key, value);
      expect(actualResult.type.indexOf(expectedResult.type)).not.toEqual(-1);
      expect(actualResult.page).toEqual(expectedResult.page);
      expect(actualResult.key).toEqual(key);
      expect(actualResult.value).toEqual(value);
    });
    (0, _eventGeneratorTester.it)('setVariableWithFunction should return the correct type', function () {
      var key = 'keyyy';
      var func = function func(data) {
        return data;
      };
      var expectedResult = {
        type: _constants.REDUX_SET_FN, page: page, key: key, func: func
      };
      var actualResult = (0, _actions.setVariableWithFunction)(page, key, func);
      expect(actualResult.type.indexOf(expectedResult.type)).not.toEqual(-1);
      expect(actualResult.page).toEqual(expectedResult.page);
      expect(actualResult.key).toEqual(key);
      expect(actualResult.func).toEqual(func);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9fX3Rlc3RzX18vYWN0aW9ucy50ZXN0LmpzIl0sIm5hbWVzIjpbInBhZ2UiLCJmaXh0dXJlIiwiZXhwZWN0ZWRSZXN1bHQiLCJ0eXBlIiwicGF5bG9hZCIsInJlc3VsdCIsImFjdHVhbFJlc3VsdCIsImV4cGVjdCIsImluZGV4T2YiLCJub3QiLCJ0b0VxdWFsIiwiZXJyb3IiLCJvcHRpb25zIiwiZGF0YSIsImZvcm1OYW1lIiwia2V5IiwidmFsdWUiLCJmdW5jIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOztBQVVBOztBQVVBLElBQU1BLE9BQU8sY0FBYjs7QUFFQSxvQ0FBUyxrQkFBVCxFQUE2QixZQUFNO0FBQ2pDLHNDQUFTLDRCQUFULEVBQXVDLFlBQU07QUFDM0Msa0NBQUcsdUVBQUgsRUFBNEUsWUFBTTtBQUNoRixVQUFNQyxVQUFVLE1BQWhCO0FBQ0EsVUFBTUMsaUJBQWlCO0FBQ3JCQyx1Q0FEcUI7QUFFckJILGtCQUZxQjtBQUdyQkksaUJBQVNILE9BSFk7QUFJckJJLGdCQUFRSjtBQUphLE9BQXZCO0FBTUEsVUFBTUssZUFBZSxnQ0FBa0JMLE9BQWxCLEVBQTJCQSxPQUEzQixFQUFvQ0QsSUFBcEMsQ0FBckI7QUFDQU8sYUFBT0QsYUFBYUgsSUFBYixDQUFrQkssT0FBbEIsQ0FBMEJOLGVBQWVDLElBQXpDLENBQVAsRUFBdURNLEdBQXZELENBQTJEQyxPQUEzRCxDQUFtRSxDQUFDLENBQXBFO0FBQ0FILGFBQU9ELGFBQWFOLElBQXBCLEVBQTBCVSxPQUExQixDQUFrQ1IsZUFBZUYsSUFBakQ7QUFDQU8sYUFBT0QsYUFBYUYsT0FBcEIsRUFBNkJNLE9BQTdCLENBQXFDVCxPQUFyQztBQUNBTSxhQUFPRCxhQUFhRCxNQUFwQixFQUE0QkssT0FBNUIsQ0FBb0NSLGVBQWVHLE1BQW5EO0FBQ0QsS0FiRDtBQWNBLGtDQUFHLDJEQUFILEVBQWdFLFlBQU07QUFDcEUsVUFBTUosVUFBVSxZQUFoQjtBQUNBLFVBQU1DLGlCQUFpQjtB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RixJQUFqRDtBQUNBTyxhQUFPRCxhQUFhUyxHQUFwQixFQUF5QkwsT0FBekIsQ0FBaUNLLEdBQWpDO0FBQ0FSLGFBQU9ELGFBQWFVLEtBQXBCLEVBQTJCTixPQUEzQixDQUFtQ00sS0FBbkM7QUFDRCxLQVhEO0FBWUEsa0NBQUcsd0RBQUgsRUFBNkQsWUFBTTtBQUNqRSxVQUFNRCxNQUFNLE9BQVo7QUFDQSxVQUFNRSxPQUFPLFNBQVBBLElBQU8sQ0FBQ0osSUFBRDtBQUFBLGVBQVVBLElBQVY7QUFBQSxPQUFiO0FBQ0EsVUFBTVgsaUJBQWlCO0FBQ3JCQyxxQ0FEcUIsRUFDREgsVUFEQyxFQUNLZSxRQURMLEVBQ1VFO0FBRFYsT0FBdkI7QUFHQSxVQUFNWCxlQUFlLHNDQUF3Qk4sSUFBeEIsRUFBOEJlLEdBQTlCLEVBQW1DRSxJQUFuQyxDQUFyQjtBQUNBVixhQUFPRCxhQUFhSCxJQUFiLENBQWtCSyxPQUFsQixDQUEwQk4sZUFBZUMsSUFBekMsQ0FBUCxFQUF1RE0sR0FBdkQsQ0FBMkRDLE9BQTNELENBQW1FLENBQUMsQ0FBcEU7QUFDQUgsYUFBT0QsYUFBYU4sSUFBcEIsRUFBMEJVLE9BQTFCLENBQWtDUixlQUFlRixJQUFqRDtBQUNBTyxhQUFPRCxhQUFhUyxHQUFwQixFQUF5QkwsT0FBekIsQ0FBaUNLLEdBQWpDO0FBQ0FSLGFBQU9ELGFBQWFXLElBQXBCLEVBQTBCUCxPQUExQixDQUFrQ08sSUFBbEM7QUFDRCxLQVhEO0FBWUQsR0FwRkQ7QUFxRkQsQ0F0RkQiLCJmaWxlIjoiYWN0aW9ucy50ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVzY3JpYmUsIGl0IH0gZnJvbSAnZXNsaW50L2xpYi90ZXN0ZXJzL2V2ZW50LWdlbmVyYXRvci10ZXN0ZXInO1xuaW1wb3J0IHtcbiAgc3VibWl0Rm9ybUZhaWxlZCxcbiAgc3VibWl0Rm9ybVN1Y2NlZWQsXG4gIHN1Ym1pdEZvcm0sXG4gIGFja25vd2xlZGdlLFxuICBjbGVhbnVwLFxuICBzZXRWYXJpYWJsZSxcbiAgc2V0VmFyaWFibGVXaXRoRnVuY3Rpb24sXG59IGZyb20gJy4uL2FjdGlvbnMnO1xuXG5pbXBvcnQge1xuICBET19TVUJNSVQsXG4gIFNVQk1JVF9GQUlMRUQsXG4gIFNVQk1JVF9TVUNDRUVELFxuICBTVUJNSVRfQUNLRUQsXG4gIEhPQ19DTEVBUixcbiAgUkVEVVhfU0VULFxuICBSRURVWF9TRVRfRk4sXG59IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbmNvbnN0IHBhZ2UgPSAnbW9ja1Rlc3RQYWdlJztcblxuZGVzY3JpYmUoJ1JlZ2lzdGVyIEFjdGlvbnMnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdyZWdpc3RlciBzZXJ2ZXIgdmFsaWRhdGlvbicsICgpID0+IHtcbiAgICBpdCgnc3VibWl0Rm9ybVN1Y2NlZWQgc2hvdWxkIHJldHVybiB0aGUgY29ycmVjdCB0eXBlIGFuZCBzdWNjZXNzIHJlc3BvbnNlJywgKCkgPT4ge1xuICAgICAgY29uc3QgZml4dHVyZSA9ICdkYXRhJztcbiAgICAgIGNvbnN0IGV4cGVjdGVkUmVzdWx0ID0ge1xuICAgICAgICB0eXBlOiBTVUJNSVRfU1VDQ0VFRCxcbiAgICAgICAgcGFnZSxcbiAgICAgICAgcGF5bG9hZDogZml4dHVyZSxcbiAgICAgICAgcmVzdWx0OiBmaXh0dXJlLFxuICAgICAgfTtcbiAgICAgIGNvbnN0IGFjdHVhbFJlc3VsdCA9IHN1Ym1pdEZvcm1TdWNjZWVkKGZpeHR1cmUsIGZpeHR1cmUsIHBhZ2UpO1xuICAgICAgZXhwZWN0KGFjdHVhbFJlc3VsdC50eXBlLmluZGV4T2YoZXhwZWN0ZWRSZXN1bHQudHlwZSkpLm5vdC50b0VxdWFsKC0xKTtcbiAgICAgIGV4cGVjdChhY3R1YWxSZXN1bHQucGFnZSkudG9FcXVhbChleHBlY3RlZFJlc3VsdC5wYWdlKTtcbiAgICAgIGV4cGVjdChhY3R1YWxSZXN1bHQucGF5bG9hZCkudG9FcXVhbChmaXh0dXJlKTtcbiAgICAgIGV4cGVjdChhY3R1YWxSZXN1bHQucmVzdWx0KS50b0VxdWFsKGV4cGVjdGVkUmVzdWx0LnJlc3VsdCk7XG4gICAgfSk7XG4gICAgaXQoJ3N1Ym1pdEZvcm1GYWlsZWQgc2hvdWxkIHJldHVybiB0aGUgY29ycmVjdCB0eXBlIGFuZCBlcnJvcicsICgpID0+IHtcbiAgICAgIGNvbnN0IGZpeHR1cmUgPSAnc29tZSBlcnJvcic7XG4gICAgICBjb25zdCBleHBlY3RlZFJlc3VsdCA9IHtcbiAgICAgICAgdHlwZTogU1VCTUlUX0ZBSUxFRCxcbiAgICAgICAgcGFnZSxcbiAgICAgICAgZXJyb3I6IGZpeHR1cmUsXG4gICAgICB9O1xuICAgICAgY29uc3QgYWN0dWFsUmVzdWx0ID0gc3VibWl0Rm9ybUZhaWxlZChmaXh0dXJlLCBmaXh0dXJlLCBwYWdlKTtcbiAgICAgIGV4cGVjdChhY3R1YWxSZXN1bHQudHlwZS5pbmRleE9mKGV4cGVjdGVkUmVzdWx0LnR5cGUpKS5ub3QudG9FcXVhbCgtMSk7XG4gICAgICBleHBlY3QoYWN0dWFsUmVzdWx0LnBhZ2UpLnRvRXF1YWwoZXhwZWN0ZWRSZXN1bHQucGFnZSk7XG4gICAgICBleHBlY3QoYWN0dWFsUmVzdWx0LnBheWxvYWQpLnRvRXF1YWwoZml4dHVyZSk7XG4gICAgICBleHBlY3QoYWN0dWFsUmVzdWx0LnJlc3VsdCkudG9FcXVhbChleHBlY3RlZFJlc3VsdC5yZXN1bHQpO1xuICAgIH0pO1xuICAgIGl0KCdzdWJtaXRGb3JtIHNob3VsZCByZXR1cm4gdGhlIGNvcnJlY3QgdHlwZScsICgpID0+IHtcbiAgICAgIGNvbnN0IGZpeHR1cmUgPSAnZGF0YSc7XG4gICAgICBjb25zdCBleHBlY3RlZFJlc3VsdCA9IHtcbiAgICAgICAgdHlwZTogRE9fU1VCTUlULFxuICAgICAgICBvcHRpb25zOiB7IHBhZ2UgfSxcbiAgICAgICAgZGF0YTogZml4dHVyZSxcbiAgICAgIH07XG4gICAgICBjb25zdCBhY3R1YWxSZXN1bHQgPSBzdWJtaXRGb3JtKGZpeHR1cmUsIHBhZ2UpO1xuICAgICAgZXhwZWN0KGFjdHVhbFJlc3VsdC50eXBlLmluZGV4T2YoZXhwZWN0ZWRSZXN1bHQudHlwZSkpLm5vdC50b0VxdWFsKC0xKTtcbiAgICAgIGV4cGVjdChhY3R1YWxSZXN1bHQucGFnZSkudG9FcXVhbChleHBlY3RlZFJlc3VsdC5wYWdlKTtcbiAgICAgIGV4cGVjdChhY3R1YWxSZXN1bHQucmVzdWx0KS50b0VxdWFsKGV4cGVjdGVkUmVzdWx0LnJlc3VsdCk7XG4gICAgfSk7XG4gICAgaXQoJ2NsZWFudXAgc2hvdWxkIHJldHVybiB0aGUgY29ycmVjdCB0eXBlJywgKCkgPT4ge1xuICAgICAgY29uc3QgZXhwZWN0ZWRSZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IEhPQ19DTEVBUixcbiAgICAgICAgcGFnZSxcbiAgICAgIH07XG4gICAgICBjb25zdCBhY3R1YWxSZXN1bHQgPSBjbGVhbnVwKHBhZ2UpO1xuICAgICAgZXhwZWN0KGFjdHVhbFJlc3VsdC50eXBlLmluZGV4T2YoZXhwZWN0ZWRSZXN1bHQudHlwZSkpLm5vdC50b0VxdWFsKC0xKTtcbiAgICAgIGV4cGVjdChhY3R1YWxSZXN1bHQucGFnZSkudG9FcXVhbChleHBlY3RlZFJlc3VsdC5wYWdlKTtcbiAgICB9KTtcbiAgICBpdCgnYWNrbm93bGVkZ2Ugc2hvdWxkIHJldHVybiB0aGUgY29ycmVjdCB0eXBlJywgKCkgPT4ge1xuICAgICAgY29uc3QgZml4dHVyZSA9ICdkYXRhJztcbiAgICAgIGNvbnN0IGV4cGVjdGVkUmVzdWx0ID0ge1xuICAgICAgICB0eXBlOiBTVUJNSVRfQUNLRUQsXG4gICAgICAgIHBhZ2UsXG4gICAgICB9O1xuICAgICAgY29uc3QgYWN0dWFsUmVzdWx0ID0gYWNrbm93bGVkZ2UocGFnZSwgZml4dHVyZSk7XG4gICAgICBleHBlY3QoYWN0dWFsUmVzdWx0LnR5cGUuaW5kZXhPZihleHBlY3RlZFJlc3VsdC50eXBlKSkubm90LnRvRXF1YWwoLTEpO1xuICAgICAgZXhwZWN0KGFjdHVhbFJlc3VsdC5wYWdlKS50b0VxdWFsKGV4cGVjdGVkUmVzdWx0LnBhZ2UpO1xuICAgICAgZXhwZWN0KGFjdHVhbFJlc3VsdC5mb3JtTmFtZSkudG9FcXVhbChmaXh0dXJlKTtcbiAgICB9KTtcbiAgICBpdCgnc2V0VmFyaWFibGUgc2hvdWxkIHJldHVybiB0aGUgY29ycmVjdCB0eXBlJywgKCkgPT4ge1xuICAgICAgY29uc3Qga2V5ID0gJ2tleXl5JztcbiAgICAgIGNvbnN0IHZhbHVlID0gJ3ZhbHVlZWUnO1xuICAgICAgY29uc3QgZXhwZWN0ZWRSZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IFJFRFVYX1NFVCwgcGFnZSwga2V5LCB2YWx1ZSxcbiAgICAgIH07XG4gICAgICBjb25zdCBhY3R1YWxSZXN1bHQgPSBzZXRWYXJpYWJsZShwYWdlLCBrZXksIHZhbHVlKTtcbiAgICAgIGV4cGVjdChhY3R1YWxSZXN1bHQudHlwZS5pbmRleE9mKGV4cGVjdGVkUmVzdWx0LnR5cGUpKS5ub3QudG9FcXVhbCgtMSk7XG4gICAgICBleHBlY3QoYWN0dWFsUmVzdWx0LnBhZ2UpLnRvRXF1YWwoZXhwZWN0ZWRSZXN1bHQucGFnZSk7XG4gICAgICBleHBlY3QoYWN0dWFsUmVzdWx0LmtleSkudG9FcXVhbChrZXkpO1xuICAgICAgZXhwZWN0KGFjdHVhbFJlc3VsdC52YWx1ZSkudG9FcXVhbCh2YWx1ZSk7XG4gICAgfSk7XG4gICAgaXQoJ3NldFZhcmlhYmxlV2l0aEZ1bmN0aW9uIHNob3VsZCByZXR1cm4gdGhlIGNvcnJlY3QgdHlwZScsICgpID0+IHtcbiAgICAgIGNvbnN0IGtleSA9ICdrZXl5eSc7XG4gICAgICBjb25zdCBmdW5jID0gKGRhdGEpID0+IGRhdGE7XG4gICAgICBjb25zdCBleHBlY3RlZFJlc3VsdCA9IHtcbiAgICAgICAgdHlwZTogUkVEVVhfU0VUX0ZOLCBwYWdlLCBrZXksIGZ1bmMsXG4gICAgICB9O1xuICAgICAgY29uc3QgYWN0dWFsUmVzdWx0ID0gc2V0VmFyaWFibGVXaXRoRnVuY3Rpb24ocGFnZSwga2V5LCBmdW5jKTtcbiAgICAgIGV4cGVjdChhY3R1YWxSZXN1bHQudHlwZS5pbmRleE9mKGV4cGVjdGVkUmVzdWx0LnR5cGUpKS5ub3QudG9FcXVhbCgtMSk7XG4gICAgICBleHBlY3QoYWN0dWFsUmVzdWx0LnBhZ2UpLnRvRXF1YWwoZXhwZWN0ZWRSZXN1bHQucGFnZSk7XG4gICAgICBleHBlY3QoYWN0dWFsUmVzdWx0LmtleSkudG9FcXVhbChrZXkpO1xuICAgICAgZXhwZWN0KGFjdHVhbFJlc3VsdC5mdW5jKS50b0VxdWFsKGZ1bmMpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19