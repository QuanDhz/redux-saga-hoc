'use strict';

var _eventGeneratorTester = require('eslint/lib/testers/event-generator-tester');

var _actions = require('../actions');

var _constants = require('../constants');

var page = 'mockTestPage';

(0, _eventGeneratorTester.describe)('Register Actions', function () {
  (0, _eventGeneratorTester.describe)('register server validation', function () {
    (0, _eventGeneratorTester.it)('submitFormSucceed should return the correct type and success response', function () {
      var fixture = 'data';
      var expectedResult = {
        type: _constants.SUBMIT_SUCCEED,
        page: page,
        result: fixture
      };
      var actualResult = (0, _actions.submitFormSucceed)(fixture, page);
      expect(actualResult.type.indexOf(expectedResult.type)).not.toEqual(-1);
      expect(actualResult.page).toEqual(expectedResult.page);
      expect(actualResult.result).toEqual(expectedResult.result);
    });
    (0, _eventGeneratorTester.it)('submitFormFailed should return the correct type and error', function () {
      var fixture = 'some error';
      var expectedResult = {
        type: _constants.SUBMIT_FAILED,
        page: page,
        error: fixture
      };
      var actualResult = (0, _actions.submitFormFailed)(fixture, page);
      expect(actualResult.type.indexOf(expectedResult.type)).not.toEqual(-1);
      expect(actualResult.page).toEqual(expectedResult.page);
      expect(actualResult.result).toEqual(expectedResult.result);
    });
    (0, _eventGeneratorTester.it)('submitForm should return the correct type', function () {
      var fixture = 'data';
      var expectedResult = {
        type: _constants.DO_SUBMIT,
        options: { page: page },
        data: fixture
      };
      var actualResult = (0, _actions.submitForm)(fixture, page);
      expect(actualResult.type.indexOf(expectedResult.type)).not.toEqual(-1);
      expect(actualResult.page).toEqual(expectedResult.page);
      expect(actualResult.result).toEqual(expectedResult.result);
    });
    (0, _eventGeneratorTester.it)('cleanup should return the correct type', function () {
      var expectedResult = {
        type: _constants.HOC_CLEAR,
        page: page
      };
      var actualResult = (0, _actions.cleanup)(page);
      expect(actualResult.type.indexOf(expectedResult.type)).not.toEqual(-1);
      expect(actualResult.page).toEqual(expectedResult.page);
    });
    (0, _eventGeneratorTester.it)('cleanup should return the correct type', function () {
      var fixture = 'data';
      var expectedResult = {
        type: _constants.SUBMIT_ACKED,
        page: page
      };
      var actualResult = (0, _actions.acknowledge)(page, fixture);
      expect(actualResult.type.indexOf(expectedResult.type)).not.toEqual(-1);
      expect(actualResult.page).toEqual(expectedResult.page);
      expect(actualResult.formName).toEqual(fixture);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9fX3Rlc3RzX18vYWN0aW9ucy50ZXN0LmpzIl0sIm5hbWVzIjpbInBhZ2UiLCJmaXh0dXJlIiwiZXhwZWN0ZWRSZXN1bHQiLCJ0eXBlIiwicmVzdWx0IiwiYWN0dWFsUmVzdWx0IiwiZXhwZWN0IiwiaW5kZXhPZiIsIm5vdCIsInRvRXF1YWwiLCJlcnJvciIsIm9wdGlvbnMiLCJkYXRhIiwiZm9ybU5hbWUiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBUUE7O0FBUUEsSUFBTUEsT0FBTyxjQUFiOztBQUVBLG9DQUFTLGtCQUFULEVBQTZCLFlBQU07QUFDakMsc0NBQVMsNEJBQVQsRUFBdUMsWUFBTTtBQUMzQyxrQ0FBRyx1RUFBSCxFQUE0RSxZQUFNO0FBQ2hGLFVBQU1DLFVBQVUsTUFBaEI7QUFDQSxVQUFNQyxpQkFBaUI7QUFDckJDLHVDQURxQjtBQUVyQkgsa0JBRnFCO0FBR3JCSSxnQkFBUUg7QUFIYSxPQUF2QjtBQUtBLFVBQU1JLGVBQWUsZ0NBQWtCSixPQUFsQixFQUEyQkQsSUFBM0IsQ0FBckI7QUFDQU0sYUFBT0QsYUFBYUYsSUFBYixDQUFrQkksT0FBbEIsQ0FBMEJMLGVBQWVDLElBQXpDLENBQVAsRUFBdURLLEdBQXZELENBQTJEQyxPQUEzRCxDQUFtRSxDQUFDLENBQXBFO0FBQ0FILGFBQU9ELGFBQWFMLElBQXBCLEVBQTBCUyxPQUExQixDQUFrQ1AsZUFBZUYsSUFBakQ7QUFDQU0sYUFBT0QsYUFBYUQsTUFBcEIsRUFBNEJLLE9BQTVCLENBQW9DUCxlQUFlRSxNQUFuRDtBQUNELEtBWEQ7QUFZQSxrQ0FBRywyREFBSCxFQUFnRSxZQUFNO0FBQ3BFLFVBQU1ILFVBQVUsWUFBaEI7QUFDQSxVQUFNQyxpQkFBaUI7QUFDckJDLHNDQURxQjtBQUVyQkgsa0JBRnFCO0FBR3JCVSxlQUFPVDtBQUhjLE9BQXZCO0FBS0EsVUFBTUksZUFBZSwrQkFBaUJKLE9BQWpCLEVBQTBCRCxJQUExQixDQUFyQjtBQUNBTSxhQUFPRCxhQUFhRixJQUFiLENBQWtCSSxPQUFsQixDQUEwQkwsZUFBZUMsSUFBekMsQ0FBUCxFQUF1REssR0FBdkQsQ0FBMkRDLE9BQTNELENBQW1FLENBQUMsQ0FBcEU7QUFDQUgsYUFBT0QsYUFBYUwsSUFBcEIsRUFBMEJTLE9BQTFCLENBQWtDUCxlQUFlRixJQUFqRDtBQUNBTSxhQUFPRCxhQUFhRCxNQUFwQixFQUE0QkssT0FBNUIsQ0FBb0NQLGVBQWVFLE1BQW5EO0FBQ0QsS0FYRDtBQVlBLGtDQUFHLDJDQUFILEVBQWdELFlBQU07QUFDcEQsVUFBTUgsVUFBVSxNQUFoQjtBQUNBLFVBQU1DLGlCQUFpQjtBQUNyQkMsa0NBRHFCO0FBRXJCUSxpQkFBUyxFQUFFWCxVQUFGLEVBRlk7QUFHckJZLGNBQU1YO0FBSGUsT0FBdkI7QUFLQSxVQUFNSSxlQUFlLHlCQUFXSixPQUFYLEVBQW9CRCxJQUFwQixDQUFyQjtBQUNBTSxhQUFPRCxhQUFhRixJQUFiLENBQWtCSSxPQUFsQixDQUEwQkwsZUFBZUMsSUFBekMsQ0FBUCxFQUF1REssR0FBdkQsQ0FBMkRDLE9BQTNELENBQW1FLENBQUMsQ0FBcEU7QUFDQUgsYUFBT0QsYUFBYUwsSUFBcEIsRUFBMEJTLE9BQTFCLENBQWtDUCxlQUFlRixJQUFqRDtBQUNBTSxhQUFPRCxhQUFhRCxNQUFwQixFQUE0QkssT0FBNUIsQ0FBb0NQLGVBQWVFLE1BQW5EO0FBQ0QsS0FYRDtBQVlBLGtDQUFHLHdDQUFILEVBQTZDLFlBQU07QUFDakQsVUFBTUYsaUJBQWlCO0FBQ3JCQyxrQ0FEcUI7QUFFckJIO0FBRnFCLE9BQXZCO0FBSUEsVUFBTUssZUFBZSxzQkFBUUwsSUFBUixDQUFyQjtBQUNBTSxhQUFPRCxhQUFhRixJQUFiLENBQWtCSSxPQUFsQixDQUEwQkwsZUFBZUMsSUFBekMsQ0FBUCxFQUF1REssR0FBdkQsQ0FBMkRDLE9BQTNELENBQW1FLENBQUMsQ0FBcEU7QUFDQUgsYUFBT0QsYUFBYUwsSUFBcEIsRUFBMEJTLE9BQTFCLENBQWtDUCxlQUFlRixJQUFqRDtBQUNELEtBUkQ7QUFTQSxrQ0FBRyx3Q0FBSCxFQUE2QyxZQUFNO0FBQ2pELFVBQU1DLFVBQVUsTUFBaEI7QUFDQSxVQUFNQyxpQkFBaUI7QUFDckJDLHFDQURxQjtBQUVyQkg7QUFGcUIsT0FBdkI7QUFJQSxVQUFNSyxlQUFlLDBCQUFZTCxJQUFaLEVBQWtCQyxPQUFsQixDQUFyQjtBQUNBSyxhQUFPRCxhQUFhRixJQUFiLENBQWtCSSxPQUFsQixDQUEwQkwsZUFBZUMsSUFBekMsQ0FBUCxFQUF1REssR0FBdkQsQ0FBMkRDLE9BQTNELENBQW1FLENBQUMsQ0FBcEU7QUFDQUgsYUFBT0QsYUFBYUwsSUFBcEIsRUFBMEJTLE9BQTFCLENBQWtDUCxlQUFlRixJQUFqRDtBQUNBTSxhQUFPRCxhQUFhUSxRQUFwQixFQUE4QkosT0FBOUIsQ0FBc0NSLE9BQXRDO0FBQ0QsS0FWRDtBQVdELEdBekREO0FBMERELENBM0REIiwiZmlsZSI6ImFjdGlvbnMudGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlc2NyaWJlLCBpdCB9IGZyb20gJ2VzbGludC9saWIvdGVzdGVycy9ldmVudC1nZW5lcmF0b3ItdGVzdGVyJztcbmltcG9ydCB7XG4gIHN1Ym1pdEZvcm1GYWlsZWQsXG4gIHN1Ym1pdEZvcm1TdWNjZWVkLFxuICBzdWJtaXRGb3JtLFxuICBhY2tub3dsZWRnZSxcbiAgY2xlYW51cCxcbn0gZnJvbSAnLi4vYWN0aW9ucyc7XG5cbmltcG9ydCB7XG4gIERPX1NVQk1JVCxcbiAgU1VCTUlUX0ZBSUxFRCxcbiAgU1VCTUlUX1NVQ0NFRUQsXG4gIFNVQk1JVF9BQ0tFRCxcbiAgSE9DX0NMRUFSLFxufSBmcm9tICcuLi9jb25zdGFudHMnO1xuXG5jb25zdCBwYWdlID0gJ21vY2tUZXN0UGFnZSc7XG5cbmRlc2NyaWJlKCdSZWdpc3RlciBBY3Rpb25zJywgKCkgPT4ge1xuICBkZXNjcmliZSgncmVnaXN0ZXIgc2VydmVyIHZhbGlkYXRpb24nLCAoKSA9PiB7XG4gICAgaXQoJ3N1Ym1pdEZvcm1TdWNjZWVkIHNob3VsZCByZXR1cm4gdGhlIGNvcnJlY3QgdHlwZSBhbmQgc3VjY2VzcyByZXNwb25zZScsICgpID0+IHtcbiAgICAgIGNvbnN0IGZpeHR1cmUgPSAnZGF0YSc7XG4gICAgICBjb25zdCBleHBlY3RlZFJlc3VsdCA9IHtcbiAgICAgICAgdHlwZTogU1VCTUlUX1NVQ0NFRUQsXG4gICAgICAgIHBhZ2UsXG4gICAgICAgIHJlc3VsdDogZml4dHVyZSxcbiAgICAgIH07XG4gICAgICBjb25zdCBhY3R1YWxSZXN1bHQgPSBzdWJtaXRGb3JtU3VjY2VlZChmaXh0dXJlLCBwYWdlKTtcbiAgICAgIGV4cGVjdChhY3R1YWxSZXN1bHQudHlwZS5pbmRleE9mKGV4cGVjdGVkUmVzdWx0LnR5cGUpKS5ub3QudG9FcXVhbCgtMSk7XG4gICAgICBleHBlY3QoYWN0dWFsUmVzdWx0LnBhZ2UpLnRvRXF1YWwoZXhwZWN0ZWRSZXN1bHQucGFnZSk7XG4gICAgICBleHBlY3QoYWN0dWFsUmVzdWx0LnJlc3VsdCkudG9FcXVhbChleHBlY3RlZFJlc3VsdC5yZXN1bHQpO1xuICAgIH0pO1xuICAgIGl0KCdzdWJtaXRGb3JtRmFpbGVkIHNob3VsZCByZXR1cm4gdGhlIGNvcnJlY3QgdHlwZSBhbmQgZXJyb3InLCAoKSA9PiB7XG4gICAgICBjb25zdCBmaXh0dXJlID0gJ3NvbWUgZXJyb3InO1xuICAgICAgY29uc3QgZXhwZWN0ZWRSZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IFNVQk1JVF9GQUlMRUQsXG4gICAgICAgIHBhZ2UsXG4gICAgICAgIGVycm9yOiBmaXh0dXJlLFxuICAgICAgfTtcbiAgICAgIGNvbnN0IGFjdHVhbFJlc3VsdCA9IHN1Ym1pdEZvcm1GYWlsZWQoZml4dHVyZSwgcGFnZSk7XG4gICAgICBleHBlY3QoYWN0dWFsUmVzdWx0LnR5cGUuaW5kZXhPZihleHBlY3RlZFJlc3VsdC50eXBlKSkubm90LnRvRXF1YWwoLTEpO1xuICAgICAgZXhwZWN0KGFjdHVhbFJlc3VsdC5wYWdlKS50b0VxdWFsKGV4cGVjdGVkUmVzdWx0LnBhZ2UpO1xuICAgICAgZXhwZWN0KGFjdHVhbFJlc3VsdC5yZXN1bHQpLnRvRXF1YWwoZXhwZWN0ZWRSZXN1bHQucmVzdWx0KTtcbiAgICB9KTtcbiAgICBpdCgnc3VibWl0Rm9ybSBzaG91bGQgcmV0dXJuIHRoZSBjb3JyZWN0IHR5cGUnLCAoKSA9PiB7XG4gICAgICBjb25zdCBmaXh0dXJlID0gJ2RhdGEnO1xuICAgICAgY29uc3QgZXhwZWN0ZWRSZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IERPX1NVQk1JVCxcbiAgICAgICAgb3B0aW9uczogeyBwYWdlIH0sXG4gICAgICAgIGRhdGE6IGZpeHR1cmUsXG4gICAgICB9O1xuICAgICAgY29uc3QgYWN0dWFsUmVzdWx0ID0gc3VibWl0Rm9ybShmaXh0dXJlLCBwYWdlKTtcbiAgICAgIGV4cGVjdChhY3R1YWxSZXN1bHQudHlwZS5pbmRleE9mKGV4cGVjdGVkUmVzdWx0LnR5cGUpKS5ub3QudG9FcXVhbCgtMSk7XG4gICAgICBleHBlY3QoYWN0dWFsUmVzdWx0LnBhZ2UpLnRvRXF1YWwoZXhwZWN0ZWRSZXN1bHQucGFnZSk7XG4gICAgICBleHBlY3QoYWN0dWFsUmVzdWx0LnJlc3VsdCkudG9FcXVhbChleHBlY3RlZFJlc3VsdC5yZXN1bHQpO1xuICAgIH0pO1xuICAgIGl0KCdjbGVhbnVwIHNob3VsZCByZXR1cm4gdGhlIGNvcnJlY3QgdHlwZScsICgpID0+IHtcbiAgICAgIGNvbnN0IGV4cGVjdGVkUmVzdWx0ID0ge1xuICAgICAgICB0eXBlOiBIT0NfQ0xFQVIsXG4gICAgICAgIHBhZ2UsXG4gICAgICB9O1xuICAgICAgY29uc3QgYWN0dWFsUmVzdWx0ID0gY2xlYW51cChwYWdlKTtcbiAgICAgIGV4cGVjdChhY3R1YWxSZXN1bHQudHlwZS5pbmRleE9mKGV4cGVjdGVkUmVzdWx0LnR5cGUpKS5ub3QudG9FcXVhbCgtMSk7XG4gICAgICBleHBlY3QoYWN0dWFsUmVzdWx0LnBhZ2UpLnRvRXF1YWwoZXhwZWN0ZWRSZXN1bHQucGFnZSk7XG4gICAgfSk7XG4gICAgaXQoJ2NsZWFudXAgc2hvdWxkIHJldHVybiB0aGUgY29ycmVjdCB0eXBlJywgKCkgPT4ge1xuICAgICAgY29uc3QgZml4dHVyZSA9ICdkYXRhJztcbiAgICAgIGNvbnN0IGV4cGVjdGVkUmVzdWx0ID0ge1xuICAgICAgICB0eXBlOiBTVUJNSVRfQUNLRUQsXG4gICAgICAgIHBhZ2UsXG4gICAgICB9O1xuICAgICAgY29uc3QgYWN0dWFsUmVzdWx0ID0gYWNrbm93bGVkZ2UocGFnZSwgZml4dHVyZSk7XG4gICAgICBleHBlY3QoYWN0dWFsUmVzdWx0LnR5cGUuaW5kZXhPZihleHBlY3RlZFJlc3VsdC50eXBlKSkubm90LnRvRXF1YWwoLTEpO1xuICAgICAgZXhwZWN0KGFjdHVhbFJlc3VsdC5wYWdlKS50b0VxdWFsKGV4cGVjdGVkUmVzdWx0LnBhZ2UpO1xuICAgICAgZXhwZWN0KGFjdHVhbFJlc3VsdC5mb3JtTmFtZSkudG9FcXVhbChmaXh0dXJlKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==