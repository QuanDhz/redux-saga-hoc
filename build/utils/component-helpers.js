'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _constants = require('../constants');

/**
 * @param request can be one of the 2 types below
 * - Type 1: { request: { onSuccess: <function(result)>, onError: <function(error)>, manuallyAcknowledge: <bool> } }
 * - Type 2: { request: <function> }
 * @param props
 * @returns {boolean}
 */
var analyseRequest = function analyseRequest(request, props) {
  var error = props[_constants.SERVER_ERROR],
      success = props[_constants.SUBMIT_SUCCESS],
      result = props[_constants.RESULT],
      payload = props[_constants.PAYLOAD];

  if (typeof request === 'function') {
    request(props); // pass through props
    return false; // if you want to handle everything yourself, I assume you also want to manually handle the acknowledge process
  }
  // or calling functions
  if (error && request.onError) request.onError(error, payload);
  if (success && request.onSuccess) request.onSuccess(result, payload);
  return !request.manuallyAcknowledge;
};

/**
 * functions to call when receive props from onSubmitHOC
 * @param store this is your `nextProps`
 * @param actions can be either of 2 following structure:
 *  - Option 1: { propName: { onSuccess: <function(result)>, onError: <function(error)> } }
 *  - Option 2: { propName: <function(requestNextProps)> } function will be called either success or error
 * @param acknowledge should be automatically injected by onSubmitHOC
 *   if you want to manually acknowledge, do NOT pass in this parameter
 */
var analyseNextProps = function analyseNextProps(_ref, actions, acknowledge) {
  var store = _ref[_constants.STORE];

  if (store) {
    Object.keys(actions).forEach(function (requestName) {
      var request = actions[requestName];
      var requestNextProps = store.get(requestName);
      if (!requestNextProps || requestNextProps[_constants.IS_LOADING]) return false;

      var shouldAck = analyseRequest(request, requestNextProps);
      if (shouldAck && typeof acknowledge === 'function') {
        acknowledge(requestName);
      }
      return true;
    });
  }
};

exports.default = {
  analyseNextProps: analyseNextProps,
  analyseRequest: analyseRequest
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi91dGlscy9jb21wb25lbnQtaGVscGVycy5qcyJdLCJuYW1lcyI6WyJhbmFseXNlUmVxdWVzdCIsInJlcXVlc3QiLCJwcm9wcyIsImVycm9yIiwic3VjY2VzcyIsInJlc3VsdCIsInBheWxvYWQiLCJvbkVycm9yIiwib25TdWNjZXNzIiwibWFudWFsbHlBY2tub3dsZWRnZSIsImFuYWx5c2VOZXh0UHJvcHMiLCJhY3Rpb25zIiwiYWNrbm93bGVkZ2UiLCJzdG9yZSIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwicmVxdWVzdE5hbWUiLCJyZXF1ZXN0TmV4dFByb3BzIiwiZ2V0Iiwic2hvdWxkQWNrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7QUFFQTs7Ozs7OztBQU9BLElBQU1BLGlCQUFpQixTQUFqQkEsY0FBaUIsQ0FBQ0MsT0FBRCxFQUFVQyxLQUFWLEVBQW9CO0FBQUEsTUFDakJDLEtBRGlCLEdBQzBERCxLQUQxRDtBQUFBLE1BQ1FFLE9BRFIsR0FDMERGLEtBRDFEO0FBQUEsTUFDMkJHLE1BRDNCLEdBQzBESCxLQUQxRDtBQUFBLE1BQzhDSSxPQUQ5QyxHQUMwREosS0FEMUQ7O0FBRXpDLE1BQUksT0FBT0QsT0FBUCxLQUFtQixVQUF2QixFQUFtQztBQUNqQ0EsWUFBUUMsS0FBUixFQURpQyxDQUNqQjtBQUNoQixXQUFPLEtBQVAsQ0FGaUMsQ0FFbkI7QUFDZjtBQUNEO0FBQ0EsTUFBSUMsU0FBU0YsUUFBUU0sT0FBckIsRUFBOEJOLFFBQVFNLE9BQVIsQ0FBZ0JKLEtBQWhCLEVBQXVCRyxPQUF2QjtBQUM5QixNQUFJRixXQUFXSCxRQUFRTyxTQUF2QixFQUFrQ1AsUUFBUU8sU0FBUixDQUFrQkgsTUFBbEIsRUFBMEJDLE9BQTFCO0FBQ2xDLFNBQU8sQ0FBQ0wsUUFBUVEsbUJBQWhCO0FBQ0QsQ0FWRDs7QUFZQTs7Ozs7Ozs7O0FBU0EsSUFBTUMsbUJBQW1CLFNBQW5CQSxnQkFBbUIsT0FBcUJDLE9BQXJCLEVBQThCQyxXQUE5QixFQUE4QztBQUFBLE1BQWxDQyxLQUFrQzs7QUFDckUsTUFBSUEsS0FBSixFQUFXO0FBQ1RDLFdBQU9DLElBQVAsQ0FBWUosT0FBWixFQUFxQkssT0FBckIsQ0FBNkIsVUFBQ0MsV0FBRCxFQUFpQjtBQUM1QyxVQUFNaEIsVUFBVVUsUUFBUU0sV0FBUixDQUFoQjtBQUNBLFVBQU1DLG1CQUFtQkwsTUFBTU0sR0FBTixDQUFVRixXQUFWLENBQXpCO0FBQ0EsVUFBSSxDQUFDQyxnQkFBRCxJQUFxQkEsdUNBQXpCLEVBQXVELE9BQU8sS0FBUDs7QUFFdkQsVUFBTUUsWUFBWXBCLGVBQWVDLE9BQWYsRUFBd0JpQixnQkFBeEIsQ0FBbEI7QUFDQSxVQUFJRSxhQUFhLE9BQU9SLFdBQVAsS0FBdUIsVUFBeEMsRUFBb0Q7QUFDbERBLG9CQUFZSyxXQUFaO0FBQ0Q7QUFDRCxhQUFPLElBQVA7QUFDRCxLQVZEO0FBV0Q7QUFDRixDQWREOztrQkFnQmU7QUFDYlAsb0NBRGE7QUFFYlY7QUFGYSxDIiwiZmlsZSI6ImNvbXBvbmVudC1oZWxwZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUkVTVUxULCBTRVJWRVJfRVJST1IsIFNUT1JFLCBTVUJNSVRfU1VDQ0VTUywgSVNfTE9BRElORywgUEFZTE9BRCB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbi8qKlxuICogQHBhcmFtIHJlcXVlc3QgY2FuIGJlIG9uZSBvZiB0aGUgMiB0eXBlcyBiZWxvd1xuICogLSBUeXBlIDE6IHsgcmVxdWVzdDogeyBvblN1Y2Nlc3M6IDxmdW5jdGlvbihyZXN1bHQpPiwgb25FcnJvcjogPGZ1bmN0aW9uKGVycm9yKT4sIG1hbnVhbGx5QWNrbm93bGVkZ2U6IDxib29sPiB9IH1cbiAqIC0gVHlwZSAyOiB7IHJlcXVlc3Q6IDxmdW5jdGlvbj4gfVxuICogQHBhcmFtIHByb3BzXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuY29uc3QgYW5hbHlzZVJlcXVlc3QgPSAocmVxdWVzdCwgcHJvcHMpID0+IHtcbiAgY29uc3QgeyBbU0VSVkVSX0VSUk9SXTogZXJyb3IsIFtTVUJNSVRfU1VDQ0VTU106IHN1Y2Nlc3MsIFtSRVNVTFRdOiByZXN1bHQsIFtQQVlMT0FEXTogcGF5bG9hZCB9ID0gcHJvcHM7XG4gIGlmICh0eXBlb2YgcmVxdWVzdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJlcXVlc3QocHJvcHMpOyAvLyBwYXNzIHRocm91Z2ggcHJvcHNcbiAgICByZXR1cm4gZmFsc2U7IC8vIGlmIHlvdSB3YW50IHRvIGhhbmRsZSBldmVyeXRoaW5nIHlvdXJzZWxmLCBJIGFzc3VtZSB5b3UgYWxzbyB3YW50IHRvIG1hbnVhbGx5IGhhbmRsZSB0aGUgYWNrbm93bGVkZ2UgcHJvY2Vzc1xuICB9XG4gIC8vIG9yIGNhbGxpbmcgZnVuY3Rpb25zXG4gIGlmIChlcnJvciAmJiByZXF1ZXN0Lm9uRXJyb3IpIHJlcXVlc3Qub25FcnJvcihlcnJvciwgcGF5bG9hZCk7XG4gIGlmIChzdWNjZXNzICYmIHJlcXVlc3Qub25TdWNjZXNzKSByZXF1ZXN0Lm9uU3VjY2VzcyhyZXN1bHQsIHBheWxvYWQpO1xuICByZXR1cm4gIXJlcXVlc3QubWFudWFsbHlBY2tub3dsZWRnZTtcbn07XG5cbi8qKlxuICogZnVuY3Rpb25zIHRvIGNhbGwgd2hlbiByZWNlaXZlIHByb3BzIGZyb20gb25TdWJtaXRIT0NcbiAqIEBwYXJhbSBzdG9yZSB0aGlzIGlzIHlvdXIgYG5leHRQcm9wc2BcbiAqIEBwYXJhbSBhY3Rpb25zIGNhbiBiZSBlaXRoZXIgb2YgMiBmb2xsb3dpbmcgc3RydWN0dXJlOlxuICogIC0gT3B0aW9uIDE6IHsgcHJvcE5hbWU6IHsgb25TdWNjZXNzOiA8ZnVuY3Rpb24ocmVzdWx0KT4sIG9uRXJyb3I6IDxmdW5jdGlvbihlcnJvcik+IH0gfVxuICogIC0gT3B0aW9uIDI6IHsgcHJvcE5hbWU6IDxmdW5jdGlvbihyZXF1ZXN0TmV4dFByb3BzKT4gfSBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCBlaXRoZXIgc3VjY2VzcyBvciBlcnJvclxuICogQHBhcmFtIGFja25vd2xlZGdlIHNob3VsZCBiZSBhdXRvbWF0aWNhbGx5IGluamVjdGVkIGJ5IG9uU3VibWl0SE9DXG4gKiAgIGlmIHlvdSB3YW50IHRvIG1hbnVhbGx5IGFja25vd2xlZGdlLCBkbyBOT1QgcGFzcyBpbiB0aGlzIHBhcmFtZXRlclxuICovXG5jb25zdCBhbmFseXNlTmV4dFByb3BzID0gKHsgW1NUT1JFXTogc3RvcmUgfSwgYWN0aW9ucywgYWNrbm93bGVkZ2UpID0+IHtcbiAgaWYgKHN0b3JlKSB7XG4gICAgT2JqZWN0LmtleXMoYWN0aW9ucykuZm9yRWFjaCgocmVxdWVzdE5hbWUpID0+IHtcbiAgICAgIGNvbnN0IHJlcXVlc3QgPSBhY3Rpb25zW3JlcXVlc3ROYW1lXTtcbiAgICAgIGNvbnN0IHJlcXVlc3ROZXh0UHJvcHMgPSBzdG9yZS5nZXQocmVxdWVzdE5hbWUpO1xuICAgICAgaWYgKCFyZXF1ZXN0TmV4dFByb3BzIHx8IHJlcXVlc3ROZXh0UHJvcHNbSVNfTE9BRElOR10pIHJldHVybiBmYWxzZTtcblxuICAgICAgY29uc3Qgc2hvdWxkQWNrID0gYW5hbHlzZVJlcXVlc3QocmVxdWVzdCwgcmVxdWVzdE5leHRQcm9wcyk7XG4gICAgICBpZiAoc2hvdWxkQWNrICYmIHR5cGVvZiBhY2tub3dsZWRnZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBhY2tub3dsZWRnZShyZXF1ZXN0TmFtZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBhbmFseXNlTmV4dFByb3BzLFxuICBhbmFseXNlUmVxdWVzdCxcbn07XG4iXX0=